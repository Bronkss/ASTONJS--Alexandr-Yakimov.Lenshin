/**
Продвинутый:
1. Написать функцию
function firstSum = (arr, total) => {//Решение

},
которая вернет массив с первой парой чисел, сумма которых равна total :const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const total = 13;
firstSum(arr, total) //result = [4, 9]
2. Оценить сложность вашего алгоритма для функции firstSum (хотя бы пару строк в качестве объяснения).
 */

const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];

const total = 2;

function firstSum(arr, total) {
  const newArr = [];
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      if (arr[i] + arr[j] === total) {
        if (newArr.length < 1) {
          newArr.push(arr[i], arr[j]);
        }
      }
    }
  }

  return newArr;
}

console.log(firstSum(arr, total));

const firstSumTwo = arr.map(function (item, index, arr) {
  if (item + arr[item] === total) {
    console.log(`[ ${item}, ${arr[item]} ]`);
  }
});

/**Разберём сложность алгоритма. Так как у нас не сильно большой массив, то решение цикл в цикле имеет место быть. 
Но данное решение мне не нравится, так как он находит все возможные варианты пар, где нужна заданная сумма. Исходя из задания нам нужно найти первую 
пару. Нашли, дальше можно не искать. Сооответственно, сложность алгоритма будет O(n^2). 

Второе решение мне больше нравится, во-первых тут будет намного меньше итераций, если рассмотреть для конкретного приера - это 6 итераций. 
И сложность будет уже линейная, а не квадрадичная, так как будет простой перебор массива. Сложность O(n).
*/
